# main.tf
provider "aws" {
  region = var.region # Adjust to your desired region
}

data "aws_caller_identity" "current" {}

output "account_id" {
  value = data.aws_caller_identity.current.account_id
}


resource "aws_instance" "example" {
  ami           = var.ami_id
  instance_type = var.instance_type

  tags = {
    Name = "ExampleInstance"
  }
}


# resource "aws_subnet" "private_subnet" {
#   vpc_id     = aws_vpc.my_vpc.id
#   cidr_block = "10.0.2.0/24"
# }

module "vpc" {
  source               = "./modules/vpc"
  vpc_cidr             = var.vpc_cidr
  vpc_name             = var.vpc_name
  public_subnet_a_cidr = var.public_subnet_a_cidr
  public_subnet_b_cidr = var.public_subnet_b_cidr
  public_subnet_a_az   = var.public_subnet_a_az
  public_subnet_b_az   = var.public_subnet_b_az
}

# Main S3 bucket resource
resource "aws_s3_bucket" "my_bucket" {
  bucket = "my-unique-bucket-name-2023-ak"  # Replace with a globally unique name

  tags = {
    Name = "MyS3Bucket"
  }
}

# S3 bucket versioning configuration
resource "aws_s3_bucket_versioning" "bucket_versioning" {
  bucket = aws_s3_bucket.my_bucket.id

  versioning_configuration {
    status = "Enabled"
  }
}

# S3 bucket server-side encryption configuration
resource "aws_s3_bucket_server_side_encryption_configuration" "bucket_encryption" {
  bucket = aws_s3_bucket.my_bucket.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"  # Use "aws:kms" for KMS encryption if needed
    }
  }
}

resource "aws_iam_role" "ec2_role" {
  name = "EC2S3ReadOnlyRole"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Principal = { Service = "ec2.amazonaws.com" },
      Effect = "Allow"
    }]
  })
}

resource "aws_iam_policy_attachment" "s3_read_only" {
  name       = "s3_read_only_attachment"
  roles      = [aws_iam_role.ec2_role.name]
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
}

# Define a Launch Template for EC2 instances in the Auto Scaling Group
resource "aws_launch_template" "my_launch_template" {
  name_prefix   = "my-launch-template-"
  image_id      = var.ami_id         # Replace with a valid AMI ID or reference a variable
  instance_type = var.instance_type  # Reference the instance type variable

#   # Optional: Add an IAM instance profile if needed
#   iam_instance_profile {
#     name = aws_iam_instance_profile.ec2_instance_profile.name
#   }

#   # Optional: Specify network configuration if needed
#   network_interfaces {
#     associate_public_ip_address = true
#     subnet_id                   = aws_subnet.public_subnet.id
#   }

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = "MyASGInstance"
    }
  }
}


# Example of referencing VPC ID and subnet IDs in other resources
resource "aws_lb" "my_alb" {
  name               = "my-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = []  # Add your security group IDs here if necessary
  subnets            = module.vpc.public_subnet_ids  # Use module output for subnets

  tags = {
    Name = "MyLoadBalancer"
  }
}

# Define the Application Load Balancer Target Group
resource "aws_lb_target_group" "my_target_group" {
  name     = "my-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = module.vpc.vpc_id  # Reference the VPC ID output from the VPC module

  health_check {
    path     = "/"
    protocol = "HTTP"
  }
}


resource "aws_autoscaling_group" "my_asg" {
  desired_capacity     = var.asg_desired_capacity
  max_size             = var.asg_max_size
  min_size             = var.asg_min_size
  vpc_zone_identifier  = module.vpc.public_subnet_ids  # Use module output for subnets

  launch_template {
    id      = aws_launch_template.my_launch_template.id
    version = "$Latest"
  }

  target_group_arns = [aws_lb_target_group.my_target_group.arn]

  tag {
    key                 = "Name"
    value               = "MyAutoScalingInstance"
    propagate_at_launch = true
  }
}

# Define the IAM role for Lambda execution
resource "aws_iam_role" "lambda_exec" {
  name = "LambdaExecutionRole-ak"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Effect = "Allow"
      }
    ]
  })
}

# Attach a basic execution policy for Lambda (logging permissions)
resource "aws_iam_policy_attachment" "lambda_logging" {
  name       = "lambda_logging_attachment"
  roles      = [aws_iam_role.lambda_exec.name]
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}
